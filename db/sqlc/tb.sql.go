// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tb.sql

package db

import (
	"context"
	"database/sql"
)

const createTb = `-- name: CreateTb :one
INSERT INTO tb (
    name,
    project_id,
    describe
) VALUES (
  $1, $2, $3
) RETURNING id, name, project_id, describe, created_at
`

type CreateTbParams struct {
	Name      sql.NullString `json:"name"`
	ProjectID sql.NullInt32  `json:"project_id"`
	Describe  sql.NullString `json:"describe"`
}

func (q *Queries) CreateTb(ctx context.Context, arg CreateTbParams) (Tb, error) {
	row := q.db.QueryRowContext(ctx, createTb, arg.Name, arg.ProjectID, arg.Describe)
	var i Tb
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.Describe,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTb = `-- name: DeleteTb :exec
DELETE FROM tb 
WHERE id = $1
`

func (q *Queries) DeleteTb(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTb, id)
	return err
}

const deleteTbByPID = `-- name: DeleteTbByPID :exec
DELETE FROM tb 
WHERE project_id = $1
`

func (q *Queries) DeleteTbByPID(ctx context.Context, projectID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteTbByPID, projectID)
	return err
}

const getTb = `-- name: GetTb :one
SELECT id, name, project_id, describe, created_at FROM tb 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTb(ctx context.Context, id int32) (Tb, error) {
	row := q.db.QueryRowContext(ctx, getTb, id)
	var i Tb
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.Describe,
		&i.CreatedAt,
	)
	return i, err
}

const listTb = `-- name: ListTb :many
SELECT id, name, project_id, describe, created_at FROM tb 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTbParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTb(ctx context.Context, arg ListTbParams) ([]Tb, error) {
	rows, err := q.db.QueryContext(ctx, listTb, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tb
	for rows.Next() {
		var i Tb
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProjectID,
			&i.Describe,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateTB = `-- name: TruncateTB :exec
TRUNCATE TABLE tb
`

func (q *Queries) TruncateTB(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateTB)
	return err
}

const updateTb = `-- name: UpdateTb :one
UPDATE tb 
SET name = $2
WHERE id = $1
RETURNING id, name, project_id, describe, created_at
`

type UpdateTbParams struct {
	ID   int32          `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) UpdateTb(ctx context.Context, arg UpdateTbParams) (Tb, error) {
	row := q.db.QueryRowContext(ctx, updateTb, arg.ID, arg.Name)
	var i Tb
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ProjectID,
		&i.Describe,
		&i.CreatedAt,
	)
	return i, err
}

const whereTbByPID = `-- name: WhereTbByPID :many
SELECT id, name, project_id, describe, created_at FROM tb 
WHERE project_id = $3
ORDER BY id
LIMIT $1
OFFSET $2
`

type WhereTbByPIDParams struct {
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
	ProjectID sql.NullInt32 `json:"project_id"`
}

func (q *Queries) WhereTbByPID(ctx context.Context, arg WhereTbByPIDParams) ([]Tb, error) {
	rows, err := q.db.QueryContext(ctx, whereTbByPID, arg.Limit, arg.Offset, arg.ProjectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tb
	for rows.Next() {
		var i Tb
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ProjectID,
			&i.Describe,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
