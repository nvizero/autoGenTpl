// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tb_fields.sql

package db

import (
	"context"
	"database/sql"
)

const createTbField = `-- name: CreateTbField :one
INSERT INTO tb_fields (
    table_id,
    field_name,
    laravel_map
) VALUES (
  $1, $2, $3
) RETURNING id, field_name, laravel_map, table_id
`

type CreateTbFieldParams struct {
	TableID    sql.NullInt32  `json:"table_id"`
	FieldName  sql.NullString `json:"field_name"`
	LaravelMap sql.NullString `json:"laravel_map"`
}

func (q *Queries) CreateTbField(ctx context.Context, arg CreateTbFieldParams) (TbField, error) {
	row := q.db.QueryRowContext(ctx, createTbField, arg.TableID, arg.FieldName, arg.LaravelMap)
	var i TbField
	err := row.Scan(
		&i.ID,
		&i.FieldName,
		&i.LaravelMap,
		&i.TableID,
	)
	return i, err
}

const deleteTbFieldByTableID = `-- name: DeleteTbFieldByTableID :exec
DELETE FROM tb_fields
WHERE table_id = $1
`

func (q *Queries) DeleteTbFieldByTableID(ctx context.Context, tableID sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteTbFieldByTableID, tableID)
	return err
}

const getTFByfID = `-- name: GetTFByfID :many
SELECT id, field_name, laravel_map, table_id FROM tb_fields 
WHERE table_id = $1
`

func (q *Queries) GetTFByfID(ctx context.Context, tableID sql.NullInt32) ([]TbField, error) {
	rows, err := q.db.QueryContext(ctx, getTFByfID, tableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbField
	for rows.Next() {
		var i TbField
		if err := rows.Scan(
			&i.ID,
			&i.FieldName,
			&i.LaravelMap,
			&i.TableID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTFBytID = `-- name: GetTFBytID :many
SELECT id, field_name, laravel_map, table_id FROM tb_fields 
WHERE table_id = $1
`

func (q *Queries) GetTFBytID(ctx context.Context, tableID sql.NullInt32) ([]TbField, error) {
	rows, err := q.db.QueryContext(ctx, getTFBytID, tableID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbField
	for rows.Next() {
		var i TbField
		if err := rows.Scan(
			&i.ID,
			&i.FieldName,
			&i.LaravelMap,
			&i.TableID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTbField = `-- name: ListTbField :many
SELECT id, field_name, laravel_map, table_id FROM tb_fields
ORDER BY id desc
LIMIT $1
OFFSET $2
`

type ListTbFieldParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTbField(ctx context.Context, arg ListTbFieldParams) ([]TbField, error) {
	rows, err := q.db.QueryContext(ctx, listTbField, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbField
	for rows.Next() {
		var i TbField
		if err := rows.Scan(
			&i.ID,
			&i.FieldName,
			&i.LaravelMap,
			&i.TableID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateTbField = `-- name: TruncateTbField :exec
TRUNCATE TABLE tb_fields
`

func (q *Queries) TruncateTbField(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateTbField)
	return err
}
